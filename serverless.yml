service: eventbridge-sqs
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

plugins: 
  - serverless-iam-roles-per-function
  - serverless-apigateway-service-proxy

custom:
  apiGatewayServiceProxies:       # API Gateway forwards message directly to EventBridge
    - eventbridge:  # source and detailType are hardcoded; detail defaults to POST body
        path: /eventbridge
        method: post
        source: 'fuel-app'
        detailType: 'user-signup'
        eventBusName: { Ref: 'EventBus' }
        cors: true

functions:
  processEventsLambda:
    handler: functions/processEvents.processEvents
    events: 
      - sqs:
          arn: {"Fn::GetAtt" : [ "Queue", "Arn" ]}
          batchSize: 10
          functionResponseType: "ReportBatchItemFailures"

  putEventsLambda:
    handler: functions/putEvents.putEvents
    environment:
      EventBusName: { Ref: 'EventBus' }
    events: 
      - http:
          path: /generate
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "events:PutEvents"
        Resource: {"Fn::GetAtt" : [ "EventBus", "Arn" ]}
    
resources:
  Resources:
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: QR_EVENT_BUS


    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: QR_MESSAGE_QUEUE
        RedrivePolicy:
          deadLetterTargetArn: {"Fn::GetAtt" : [ "DeadLetterQueue", "Arn" ]}
          maxReceiveCount: 1           # Max number of retries before sending the message to Dead Letter Queue
    
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: QR_MESSAGE_DLQ
    

    TargetSQSRule:                    # Event of EventBridge
      Type: AWS::Events::Rule
      Properties: 
        Name: SignupEvent
        EventBusName: {"Fn::GetAtt" : [ "EventBus", "Arn" ]}
        EventPattern: 
          detail-type: 
            - "user-signup"
          source: 
            - "fuel-app"
        Targets:
          - Arn: {"Fn::GetAtt" : [ "Queue", "Arn" ]}
            Id: qr-event-bus-target-sqs-${self:provider.stage}


    SQSPolicy:                        # IAM Resource policy for the event bridge to send messages to the queue
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues: 
          - { Ref: 'Queue' }
        PolicyDocument: 
          Statement: 
            - Action: "SQS:SendMessage"
              Effect: "Allow"
              Resource: {"Fn::GetAtt" : [ "Queue", "Arn" ]}
              Principal:                  # Principal is required for the resource-based IAM policies. What are the entitites that are allowed to use this permission? The principal could be any AWS service, IAM user, AWS account, another AWS account, etc. 
                Service: events.amazonaws.com     # Principal for eventbridge
  Outputs:
    EventBusName:
      Description: "Event Bus"
      Value: { Ref: 'EventBus' }
